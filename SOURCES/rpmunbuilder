#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2034,SC2154

################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

################################################################################

# Utility name (String)
APP="RPMUnbuilder"

# Utility version (String)
VER="1.2.0"

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[0m"
CL_BOLD="\e[0;${BOLD};49m"
CL_UNLN="\e[0;${UNLN};49m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_YELLOW="\e[0;${YELLOW};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_DARK="\e[0;${DARK};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_YELLOW="\e[1;${YELLOW};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"

SUPPORTED_OPTS="help usage ver version"
SHORT_OPTS="h:help v:version"

################################################################################

# Main function
#
# Code: No
# Echo: No
main() {
  if [[ -n "$ver" || -n "$version" ]] ; then
    about
    exit 0
  fi

  if [[ $# -eq 0 || -n "$help" || -n "$usage" ]] ; then
    usage
    exit 0
  fi

  if ! hasApp "rpm" "rpm2cpio" "cpio" ; then
    error "For using this utility install this packages first: rpm rpm2cpio cpio"
    exit 2
  fi

  local pkg="$1"
  local path="$2"

  if ! isRPMPackage "$pkg" ; then
    error "Error! [$pkg] is not an rpm package!"
    exit 1
  fi

  if [[ -n "$path" ]] ; then
    if ! checkPerms "$path" "DWX" ; then
      error "Error! Please check permissions for directory [$path]."
      exit 3
    fi
  else
    path=$(pwd)

    if ! checkPerms "$path" "DWX" ; then
      error "Error! Please check permissions for directory [$path]."
      exit 3
    fi
  fi

  processPackage "$pkg" "$path"
}

# Start package processing
#
# 1: Package (String)
# 2: Path (String)
#
# Code: No
# Echo: No
processPackage() {
  local pkg="$1"
  local path="$2"

  showm "Unbuilding package: " $BOLD

  local src_name src_list

  src_list=$(rpm2cpio "$pkg" | cpio -div --quiet 2>&1 | grep -v "cpio:")

  mkdir -p "$path/SOURCES"

  for src_name in $src_list ; do
    if [[ $src_name =~ .spec ]] ; then
      mv "$src_name" "$path" &> /dev/null
    else
      mv "$src_name" "$path/SOURCES" &> /dev/null
    fi
  done

  show "DONE" $GREEN
}

# Check if given file is RPM package
#
# 1: Package (String)
#
# Code: Yes
# Echo: No
isRPMPackage() {
  if LC_ALL=C rpm -qp --qf "%{name}\n" "$1" &> /dev/null ; then
    return 0
  fi

  return 1
}

# Checks file or directory permissions
#
# 1: Path to file or directory (String)
#
# Code: Yes
# Echo: No
checkPerms() {
  local path="$1"
  local perms

  perms=$(echo "$2" | tr "[:lower:]" "[:upper:]")

  for perm in $(echo "$perms" | fold -w1) ; do
    case $perm in
      "R") [[ ! -r "$path" ]] && return 1 ;;
      "W") [[ ! -w "$path" ]] && return 1 ;;
      "E") [[ ! -e "$path" ]] && return 1 ;;
      "D") [[ ! -d "$path" ]] && return 1 ;;
      "F") [[ ! -f "$path" ]] && return 1 ;;
      "S") [[ ! -s "$path" ]] && return 1 ;;
      "H") [[ ! -h "$path" ]] && return 1 ;;
      "X") [[ ! -x "$path" ]] && return 1 ;;
      *) return 1 ;;
    esac
  done

  return 0
}

################################################################################

# Checks if given binary is installed on the system
#
# 1: Binary name (String)
#
# Code: Yes
# Echo: No
hasApp() {
  local app

  for app in "$@" ; do
    type -P "$app" &> /dev/null

    if [[ $? -eq 1 ]] ; then
      return 1
    fi
  done

  return 0
}

# Print message
#
# 1: Message (String)
# 2: Color code (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print message without new lines symbol
#
# 1: Message (String)
# 2: Color code (Number) [Optional]
#
# Code: No
# Echo: No
showm() {
  if [[ -n "$2" ]] ; then
    echo -e -n "\e[${2}m${1}\e[0m"
  else
    echo -e -n "$*"
  fi
}

# Print error message
#
# 1: Message (String)
#
# Code: No
# Echo: No
error() {
  show "$@" $RED 1>&2
}

# Show message about unknown option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Error! Unknown argument $1."
  doExit 1
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show "${CL_BOLD}Usage:${CL_NORM} rpmunbuilder ${CL_BROWN}{rpm-file}${CL_NORM} ${CL_GREEN}{path}${CL_NORM}"
}

# Print version info
#
# Code: No
# Echo: No
about() {
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - Source RPM unbuilder"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
}

## OPTIONS PARSING 5 ###################################################################

if [[ $# -eq 0 ]] ; then
  main
  exit $?
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift

done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

########################################################################################
