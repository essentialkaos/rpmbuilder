#!/bin/bash
# shellcheck disable=SC1117,SC2034,SC2086,SC2154,SC2181

################################################################################

require "sources-golang"
require "sources-remote"
require "sources-scm"

################################################################################

packSources() {
  local spec="$1"

  packRemoteSources "$spec"

  if [[ -n "$repo_spec" ]] ; then
    spec="$repo_spec"
  fi

  if [[ -n "$pack" || -n "$source_list" ]] ; then
    packLocalSources "$spec"
    show ""
  fi
}

packRemoteSources() {
  local spec="$1"
  local sources

  if [[ -n "${git}${svn}${bzr}${hg}${gopack}" ]] ; then
    IFS=" " read -r -a sources <<< "$(getSources "$spec")"

    if isURL "${sources[0]}" ; then
      error "The sources section cannot contain the URL to the sources when downloading with git/svn/hg/bzr/gopack is used"
      doExit $ERROR_SOURCE
    fi
  fi

  if [[ -n "$git" ]] ; then
    packSourcesFromGit "$spec"
  fi

  if [[ -n "$svn" ]] ; then
    packSourcesFromSvn "$spec"
  fi

  if [[ -n "$bzr" ]] ; then
    packSourcesFromBzr "$spec"
  fi

  if [[ -n "$hg" ]] ; then
    packSourcesFromHg  "$spec"
  fi

  if [[ -n "$gopack" ]] ; then
    packGolangSources  "$spec"
  fi
}

# Pack sources to archive file
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
packLocalSources() {
  show "Packing source files to archiveâ€¦"

  local spec="$1"

  if [[ -n "$source_list" ]] ; then
    if [[ ! -r $source_list ]] ; then
      error "Can't pack sources - file ${CL_BL_RED}${source_list}${CL_RED} not readable"
      doExit $ERROR_SOURCE
    fi

    if [[ ! -s $source_list ]] ; then
      error "Can't pack sources - file ${CL_BL_RED}${source_list}${CL_RED} is empty"
      doExit $ERROR_SOURCE
    fi

    pack=$(cat "$source_list")
  fi

  local src_target sources arch_name arch_ext arch_size

  for src_target in $pack ; do
    if [[ ! -a $src_target ]] ; then
      error "Can't pack sources - ${CL_BL_RED}${src_target}${CL_RED} not exist or not accesable"
      doExit $ERROR_SOURCE
    fi
  done

  IFS=" " read -r -a sources <<< "$(getSources "$spec")"

  arch_name=$(getArchName "${sources[0]}")
  arch_ext=$(getArchExt "${sources[0]}")

  mkdir -p "$tmp_dir/$arch_name"

  if [[ -z "$relative_pack" ]] ; then
    cp -r $pack "$tmp_dir/$arch_name" &> /dev/null
  else
    cp -r --parents $pack "$tmp_dir/$arch_name" &> /dev/null
  fi

  if [[ $? -ne 0 ]] ; then
    error "Can't copy source files to a temporary directory"
    doExit 1
  fi

  cleanPackDir "$tmp_dir/$arch_name"

  pushd "$tmp_dir" &> /dev/null || printErrorAndExit "Can't set working dir to $tmp_dir"

    packDir "$tmp_dir/$arch_name" "$arch_ext"

  popd &> /dev/null || printErrorAndExit "Can't set working dir"

  rm -rf "${tmp_dir:?}/$arch_name"

  arch_size=$(getGraceFileSize "${tmp_dir}/${arch_name}.${arch_ext}")

  show "\n${CL_GREEN}All files packed to ${CL_BL_GREEN}${arch_name}.${arch_ext}${CL_NORM} ${CL_DARK}(${arch_size})${CL_NORM}"
}

# Pack directory with source files to archive
#
# 1: Path to directory (String)
# 2: Archive extension (String)
#
# Code: No
# Echo: No
packDir() {
  local dir="$1"
  local ext="$2"

  local dir_name parent_dir arch_name

  dir_name=$(basename "$dir")
  parent_dir=$(dirname "$dir")

  if [[ -n "$3" ]] ; then
    arch_name="$3"
  else
    arch_name="$dir_name"
  fi

  pushd "$parent_dir" &> /dev/null || printErrorAndExit "Can't set working dir to $parent_dir"

    if [[ "$ext" == "tar.gz" || "$ext" == "tgz" ]] ; then
      tar czfv "$arch_name.$ext" "$dir_name" &> $verb_output
    elif [[ "$ext" == "tar.bz2" || "$ext" == "tbz2" ]]; then
      tar cjfv "$arch_name.$ext" "$dir_name" &> $verb_output
    elif [[ "$ext" == "tar.bz" || "$ext" == "tbz" ]]; then
      tar cjfv "$arch_name.$ext" "$dir_name" &> $verb_output
    elif [[ "$ext" == "tar.xz" || "$ext" == "txz" ]] ; then
      tar cf - "$dir_name" | xz -9 -c - > "$arch_name.$ext"
    else
      error "Error! Unknown archive type."
      doExit $ERROR_SOURCE
    fi

  popd &> /dev/null || printErrorAndExit "Can't set working dir"
}

# Try to find sources
#
# 1: Source file name (String)
# 2: Find only dir flag (Boolean) [Optional]
#
# Code: No
# Echo: Path to file or dir with sources (String)
findSource() {
  local name="$1"
  local get_dir="$2"

  local dir abs_dir

  if [[ -n "$source_dir" ]] ; then
    if [[ -r "$source_dir/$name" ]] ; then
      if [[ -n "$get_dir" ]] ; then
        echo "$source_dir" && return 0
      else
        echo "$source_dir/$name" && return 0
      fi
    fi
  else
    for dir in $SOURCE_PATHS ; do
      abs_dir=$(getAbsPath "$dir")

      if [[ -r "$abs_dir/$name" ]] ; then
        if [[ -n "$get_dir" ]] ; then
          echo "$abs_dir" && return 0
        else
          echo "$abs_dir/$name" && return 0
        fi
      fi
    done
  fi

  echo "" && return 1
}

# Tries to find directory with sources
#
# Code: No
# Echo: Path to directory (String)
findSourcesDir() {
  local dir

  for dir in $SOURCE_PATHS ; do
    if [[ -e "$dir" && -w "$dir" ]] ; then
      echo "$dir"
      return
    fi
  done

  echo "."
}

# Validate source files
#
# Code: Yes
# Echo: No
validateSources() {
  local source_file source_name has_errors

  if [[ -n "$no_validate" ]] ; then
    return 0
  fi

  if ! hasApp "file" ; then
    return 0
  fi

  for source_file in "$tmp_dir"/* ; do
    source_name=$(basename "$source_file")

    if ! validateSourceFile "$source_file" ; then
      if [[ -z "$has_errors" ]] ; then
        show ""
      fi

      error "Can't use file ${CL_BL_RED}${source_name}${CL_RED} for build - file type doesn't match to file content"
      has_errors=true
    fi
  done

  if [[ -n "$has_errors" ]] ; then
    return 1
  fi

  return 0
}

# Validate source file type
#
# 1: Path to file (String)
#
# Code: Yes
# Echo: No
validateSourceFile() {
  local source_file="$1"
  local src_type

  src_type=$(file --mime-type -b "$source_file" 2> /dev/null)

  if [[ -z "$src_type" ]] ; then
    return 0
  fi

  if [[ "$source_file" =~ \.gz$ || "$source_file" =~ \.tgz$ ]] ; then
    case $src_type in
      "application/x-gzip" | "application/gzip") ;;
      *) return 1 ;;
    esac
  elif [[ "$source_file" =~ \.bz2$ || "$source_file" =~ \.tbz2$ ]] ; then
    case $src_type in
      "application/x-bzip2" | "application/bzip2") ;;
      *) return 1 ;;
    esac
  elif [[ "$source_file" =~ \.bz$ || "$source_file" =~ \.tbz$ ]] ; then
    case $src_type in
      "application/x-bzip" | "application/bzip") ;;
      *) return 1 ;;
    esac
  elif [[ "$source_file" =~ \.xz$ || "$source_file" =~ \.txz$ ]] ; then
    case $src_type in
      "application/x-xz" | "application/xz") ;;
      *) return 1 ;;
    esac
  elif [[ "$source_file" =~ \.zip$ || "$source_file" =~ \.jar$ ]] ; then
    if [[ "$src_type" != "application/zip" ]] ; then
      return 1
    fi
  elif [[ "$source_file" =~ \.patch$ ]] ; then
    case $src_type in
      "text/x-diff" | "text/x-patch") ;;
      *) return 1 ;;
    esac
  elif [[ "$source_file" =~ \.pdf$ ]] ; then
    if [[ "$src_type" != "application/pdf" ]] ; then
      return 1
    fi
  fi

  return 0
}

# Generate file with SHA-512 checksums for all source files
#
# Code: Yes
# Echo: No
generateChecksumFile() {
  local status

  pushd "$tmp_dir" &> /dev/null || return 1

    sha512sum ./* 1> "$CHECKSUM_FILE" 2>/dev/null
    status=$?

  popd &> /dev/null || return 1

  return $status
}

# Remove useless files and directories from directory with data
#
# 1: Path to directory with sources (String)
#
# Code: No
# Echo: No
cleanPackDir() {
  local dir="$1"

  find "$dir" -type d -name ".git" -exec rm -rf {} \; 2> /dev/null
  find "$dir" -type d -name ".hg" -exec rm -rf {} \; 2> /dev/null
  find "$dir" -type d -name ".svn" -exec rm -rf {} \; 2> /dev/null
  find "$dir" -type d -name ".bzr" -exec rm -rf {} \; 2> /dev/null

  find "$dir" -type f -name ".gitignore" -exec rm -f {} \; 2> /dev/null
  find "$dir" -type f -name ".hgignore" -exec rm -f {} \; 2> /dev/null
  find "$dir" -type f -name ".bzrignore" -exec rm -f {} \; 2> /dev/null
  find "$dir" -type f -name ".gitmodules" -exec rm -f {} \; 2>/dev/null

  # Remove CI service configuration files
  find "$dir" -type f -name ".github" -exec rm -rf {} \; 2>/dev/null
  find "$dir" -type f -name ".travis.yml" -exec rm -f {} \; 2>/dev/null
  find "$dir" -type f -name ".drone.sec" -exec rm -f {} \; 2>/dev/null
  find "$dir" -type f -name ".drone.yml" -exec rm -f {} \; 2>/dev/null
  find "$dir" -type f -name ".hound.yml" -exec rm -f {} \; 2>/dev/null
  find "$dir" -type f -name ".vexor.yml" -exec rm -f {} \; 2>/dev/null
  find "$dir" -type f -name ".codebeatsettings" -exec rm -f {} \; 2>/dev/null

  # Remove test data
  find "$dir" -type d -name "testdata" -exec rm -rf {} \; 2>/dev/null

  # Remove empty directories
  find "$dir" -type d -empty -delete 2>/dev/null
}
