#!/bin/bash
# shellcheck disable=SC1117,SC2034,SC2086,SC2154,SC2181

################################################################################

require "spec"

################################################################################

# Download file from remote host
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
downloadRemoteSources() {
  local spec="$1"
  local download_count=0

  if [[ "$download" == "true" ]] ; then
    dlcache="."
  fi

  showSeparator "DOWNLOADING"

  if [[ ! -d "$dlcache" ]] ; then
    error "Can't download sources - download destination directory doesn't exist"
    doExit $ERROR_ARGS
  fi

  [[ -n "$git" ]]    && packSourcesFromGit "$spec"
  [[ -n "$svn" ]]    && packSourcesFromSvn "$spec"
  [[ -n "$bzr" ]]    && packSourcesFromBzr "$spec"
  [[ -n "$hg" ]]     && packSourcesFromHg  "$spec"
  [[ -n "$gopack" ]] && packGolangSources  "$spec"

  local source_file sources_list source_file_name patches_list files

  sources_list=$(getSources "$spec")
  patches_list=$(getPatches "$spec")

  files="$sources_list $patches_list"

  for source_file in $files ; do
    if [[ "$source_file" =~ ^(http|https|ftp) ]] ; then
      source_file_name=$(basename "$source_file")

      if [[ -f "$dlcache/$source_file_name" ]] ; then
        show "File ${CL_CYAN}${source_file_name}${CL_NORM} already downloaded"
        continue
      fi

      show "Downloading source file ${CL_CYAN}${source_file}${CL_NORM}â€¦"

      downloadSource "$source_file" "$download"

      if [[ $? -ne 0 ]] ; then
        error "Error! Can't download file ${CL_BL_RED}${source_file}${CL_RED}."
        doExit $ERROR_SOURCE
      fi

      ((download_count++))
    fi
  done

  if [[ $download_count -ne 0 ]] ; then
    show "\n${CL_GREEN}All source files downloaded and stored to a ${CL_BL_GREEN}${dlcache}${CL_GREEN} directory${CL_NORM}"
  fi

  showSeparator
}

# Download file sources
#
# 1: URL (String)
# 2: Target dir (String)
#
# Code: No
# Echo: No
downloadSource() {
  local url="$1"
  local dir="$2"

  local file_name start end time_diff

  file_name=$(basename "$url")

  if ! isAccessibleURL "$url" ; then
    error "Can't download file ${CL_BL_RED}${file_name}${CL_RED} - server return error code"
    doExit $ERROR_SOURCE
  else
    start=$(now)

    curl -A "$USER_AGENT" -L --max-redirs 10 --progress-bar "$url" -o "$dir/$file_name"

    end=$(now)
    time_diff=$(( end - start ))

    if [[ -z "$tmux_worker" && -z "$dlcache" && $time_diff -gt $LONG_DOWNLOADING ]] ; then
      show ""
      show "HINT: Downloading took more than $LONG_DOWNLOADING seconds. We strongly recommend use download" $YELLOW
      show "cache feature in this case. Use -dc <path> or --dlcache <path>." $YELLOW
      show ""
    fi

    if ! validateSourceFile "$dir/$file_name" ; then
      error "Invalid file ${CL_BL_RED}${source_name}${CL_RED} - file type doesn't match to file content"
      doExit $ERROR_SOURCE
    fi
  fi
}

# Checks if URL is accessible
#
# 1: URL (String)
#
# Code: Yes
# Echo: No
isAccessibleURL() {
  local status code nosniff size

  if [[ "$1" =~ http:|https: ]] ; then
    status=$(curl -A "$USER_AGENT" -LIs --max-redirs 10 -X GET "$1")
    code=$(echo -e "$status" | grep "HTTP" | cut -f2 -d" " | tail -1)
    nosniff=$(echo -e "$status" | grep "X-Content-Type-Options: nosniff")

    # Nosniff mode works on Google Code and if we simply try to check status server
    # return code 404, but we can download this file
    [[ -n "$nosniff" || "$code" == "200" ]] && return 0 || return 1
  elif [[ "$1" =~ ftp: ]] ; then
    status=$(curl -A "$USER_AGENT" "$1" -Is)
    size=$(echo "$status" | grep "Content-Length" | cut -f2 -d" ")

    [[ -n "$size" ]] && return 0 || return 1
  else
    return 1
  fi
}
