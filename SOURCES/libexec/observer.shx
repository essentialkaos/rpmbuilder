#!/bin/bash
# shellcheck disable=SC1117,SC2034,SC2086,SC2154,SC2181

################################################################################

# Start status observer
#
# Code: No
# Echo: No
startStatusObserver() {
  [[ -n "$verbose" ]] && return 0

  showt "${CL_GREEN}Executing:${CL_NORM} ${CL_DARK}~${CL_NORM}"

  statusObserver &
  observer_pid=$!
}

# Stop status observer
#
# Code: No
# Echo: No
stopStatusObserver() {
  [[ -n "$verbose" || -z "$observer_pid" ]] && return 0

  kill "$observer_pid" &> /dev/null
  wait "$observer_pid" &> /dev/null

  showt "${CL_GREEN}Executing:${CL_NORM} ${CL_CYAN}clean${CL_NORM}                                                               "
  show ""

  unset observer_pid
}

# Show status observer animation
#
# Code: No
# Echo: No
statusObserver() {
  local prev_status status cur_time bld_time grc_time

  while : ; do
    cur_time=$(now)
    bld_time=$(( cur_time - build_start ))

    status=$(grep "Executing" "$tmp_output" | tail -1 | perl -ne '/Executing\(%(\w*)\)/ && print "$1\n"')

    if [[ "$status" == "doc" ]] ; then
      if grep -q "Checking for unpackaged" "$tmp_output" ; then
        status="packaging"
      fi
    fi

    if [[ "$status" != "$prev_status+$bld_time" && -n "$status" ]] ; then
      grc_time=$(getGraceDurationShort "$build_start" "$cur_time")
      showt "${CL_GREEN}Executing:${CL_NORM} ${CL_CYAN}$status${CL_NORM} ${CL_DARK}($grc_time)${CL_NORM}"
      prev_status="$status+$bld_time"
    fi

    sleep 0.2
  done
}
