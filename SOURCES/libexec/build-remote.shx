#!/bin/bash
# shellcheck disable=SC1117,SC2034,SC2086,SC2154,SC2181

################################################################################

require "build-remote-worker"

################################################################################

# Starts parallel build in tmux
#
# *: All options passed to utility 
#
# Code: No
# Echo: No
parallelBuild() {
  if [[ ! -r $remote ]] ; then
    error "Error! Can't start parallel build process - builder list not readable."
    doExit $ERROR_ARGS
  fi

  if [[ -n "$dlcache" ]] ; then
    warn "Warning! You can't use a parallel build with download cache."
    doExit $ERROR_ARGS
  fi

  local host_list

  # shellcheck disable=SC2207
  host_list=($(filterNodeList "$remote"))

  if [[ ${#host_list[@]} -eq 0 ]] ; then
    error "Error! Can't start parallel build process - there are no build nodes with given indices."
    doExit $ERROR_ARGS
  fi

  local opt opts

  for opt in "$@" ; do
    [[ "$opt" == "-r" ]] && continue
    [[ "$opt" == "--remote" ]] && continue
    [[ "$opt" == "-P" ]] && continue
    [[ "$opt" == "--parallel" ]] && continue
    [[ "$opt" == "$remote" ]] && continue

    # shellcheck disable=SC2049
    if [[ "$opt" =~ \* ]] ; then
      opts="$opts \"$opt\""
    else
      opts="$opts $opt"
    fi
  done

  checkParallelBuildAvailability
  createParallelLock

  parallel_build=true
  build_start=$(now)

  local remote_host session_exist wid grc_time
  local wids=()

  for remote_host in "${host_list[@]}" ; do
    wid=$(mktemp -u XXXXXXXXXXXX)
    wids+=("$wid")

    if [[ -z "$session_exist" ]] ; then
      if [[ -z "$TMUX" ]] ; then
        tmux new-session -s "$TMUX_SESSION_NAME" -d "$0 $opts -r $remote_host --tmux-worker $wid" >/dev/null 2>&1
      else
        tmux new-window "$0 $opts -r $remote_host --tmux-worker $wid"
      fi

      tmux rename-window "$APP($spec)"

      session_exist=true
    else
      tmux split-window "$0 $opts -r $remote_host --tmux-worker $wid" >/dev/null 2>&1
    fi
  done

  # If we not in tmux, attach to the session
  if [[ -z "$TMUX" ]] ; then
    tmux attach-session -t "$TMUX_SESSION_NAME" >/dev/null 2>&1
  fi

  if [[ ${#wids[@]} -gt 2 ]] ; then
    tmux select-layout even-vertical
  fi

  waitTillWorkersComplete "${wids[@]}"
  removeParallelLock

  grc_time=$(getGraceDuration "$build_start")

  show "${CL_BOLD}Parallel builds are finished ${CL_DARK}($grc_time)${CL_NORM}"
}

# Prepares sources and run build on remote hosts
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
remoteBuild() {
  local spec="$1"

  showSeparator "PREPARATION"

  if [[ -n "$pre" ]] ; then
    show "Executing pre-build script…"
    # shellcheck disable=SC2091
    $($pre)
  fi

  packSources "$spec"
  processSpec "$spec"

  show ""
  show "All source files are ready for build" $GREEN

  if [[ -r $remote ]] ; then
    remoteRunMultibuild "$spec"
  else
    remoteRunBuild "$spec"
  fi
}

# Runs build on different build nodes
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
remoteRunMultibuild() {
  local spec="$1"

  local build_hosts host_info r_port r_user r_pass r_arch

  build_hosts=$(cat "$remote")

  for build_host in $build_hosts ; do
    IFS=" " read -r -a host_info <<< "$(extractHostInfo "$build_host")"

    host="${host_info[0]/!/}"

    r_port="${host_info[1]/!/}"
    r_user="${host_info[2]/!/}"
    r_pass="${host_info[3]/!/}"
    r_arch="${host_info[4]/!/}"

    port="${r_port:-$port}"
    user="${r_user:-$user}"
    pass="${r_pass:-$pass}"
    arch="${r_arch:-$arch}"

    remoteRunBuild "$spec"
  done
}

# Runs build on remote host
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
remoteRunBuild() {
  local spec="$1"
  local host_info r_port r_user r_pass r_arch

  IFS=" " read -r -a host_info <<< "$(extractHostInfo "$remote")"

  host="${host_info[0]/!/}"

  r_port="${host_info[1]/!/}"
  r_user="${host_info[2]/!/}"
  r_pass="${host_info[3]/!/}"
  r_arch="${host_info[4]/!/}"

  port="${r_port:-$port}"
  user="${r_user:-$user}"
  pass="${r_pass:-$pass}"
  arch="${r_arch:-$arch}"

  remoteCheckEnv

  showSeparator "SOURCES UPLOADING"

  uploadSourcesToRemoteHost "$spec"

  if [[ -n "$install" ]] ; then
    showSeparator "DEPENDENCIES INSTALL"
    remoteDepsInstall "$spec"
  fi

  if [[ -n "$no_build" ]] ; then
    show ""
    return
  fi

  remoteBuildProcess "$spec"
}

# Checks build environment on remote host
#
# Code: No
# Echo: No
remoteCheckEnv() {
  showSeparator "REMOTE CHECK"

  show "Connecting as ${CL_CYAN}${user}${CL_NORM} to a remote build server on ${CL_CYAN}${host}:${port:-22}${CL_NORM}…"

  if isRemoteServerReachable "$host" ; then
    if ! isSSHConnectionWorks "$host" ; then
      error "Can't connect to host ${CL_BL_RED}${host}:${port:-22}${CL_RED} (server is reachable but SSH command returned an error)"
      doExit $ERROR_REMOTE
    fi
  else
    error "Remote server ${CL_BL_RED}${host}:${port:-22}${CL_RED} is not reachable!"
    doExit $ERROR_REMOTE
  fi

  # Print info about node
  sshCommand "$host" "$BUILDER_HOME/nodeinfo 2>/dev/null"

  # Initialize build environment
  sshCommand "$host" "$BUILDER_HOME/initenv" &> /dev/null
}

# Installs build dependencies on remote host
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
remoteDepsInstall() {
  local spec="$1"

  local spec_name rpmbuild_dir specs_dir yum_opts

  spec_name=$(basename "$spec")
  rpmbuild_dir=$(getRPMBuildDir)
  specs_dir="$rpmbuild_dir/SPECS"

  yum_opts=$(getYumOpts "$verbose")

  if [[ -n "$install_latest" ]] ; then
    yum_opts="$yum_opts --actual"
  fi

  sshCommand "$host" "cd $specs_dir && sudo spec-builddep --clean $yum_opts $spec_name"

  if [[ $? -ne 0 ]] ; then
    doExit $ERROR_DEPS
  fi
}

# Validates spec on remote host
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
remoteSpecValidate() {
  local spec_name="$1"
  local opts="-e critical"

  [[ -n "$strict" ]] && opts="-e error"
  [[ -n "$pedantic" ]] && opts="-e warning"
  [[ -n "$perfect" ]] && opts="-e notice"
  [[ -n "$no_colors" ]] && opts="$opts -nc"

  local spec_name rpmbuild_dir specs_dir

  rpmbuild_dir=$(getRPMBuildDir)
  specs_dir="$rpmbuild_dir/SPECS"

  sshCommand "$host" "cd $specs_dir ; perfecto -f short $opts $spec_name"

  if [[ $? -ne 0 ]] ; then
    show ""
    error "Build canceled because spec contains problems reported by perfecto"
    doExit $ERROR_LINT
  fi

  [[ -n "$verbose" ]] && asyncSleep $LINT_WAIT
}

# Executes build commands on remote host
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
remoteBuildProcess() {
  local spec="$1"

  local spec_name build_opts build_prfx rpmbuild_dir specs_dir

  spec_name=$(basename "$spec")
  build_opts=$(getBuildOpts)
  build_prfx=$(getBuildPrefix)
  rpmbuild_dir=$(getRPMBuildDir)
  specs_dir="$rpmbuild_dir/SPECS"

  if [[ -z "$no_lint" ]] ; then
    showSeparator "VALIDATION"
    remoteSpecValidate "$spec_name"
  fi

  showSeparator "BUILD"

  checkRemoteAvailability

  build_start=$(now)

  startStatusObserver

  if [[ -n "$verbose" ]] ; then
    sshCommand "$host" "cd $specs_dir && $build_prfx rpmbuild $spec_name $build_opts" | tee "$tmp_output" &> $verb_output
  else
    sshCommand "$host" "cd $specs_dir && $build_prfx rpmbuild $spec_name $build_opts" 1> "$tmp_output" 2> /dev/null
  fi

  stopStatusObserver

  show ""

  local has_errors dl_start grc_time packages package_name package_file

  has_errors=$(tail -1 "$tmp_output" | grep -v "exit 0")

  if [[ -z "$has_errors" ]] ; then
    grc_time=$(getGraceDuration "$build_start")

    show "Build complete! The build took $grc_time." $GREEN

    showSeparator "PACKAGE PROCESSING"

    packages=$(grep -E "rpmbuild/(S|)RPMS/.*\.rpm" "$tmp_output" | cut -f2 -d" ")

    for package in $packages ; do
      package=$(echo "$package" | tr -dc '[:print:]')
      package_name=$(basename "$package")

       if [[ -n "$sign" ]] ; then
        show "Signing package ${CL_CYAN}$package_name${CL_NORM}…"
        remoteSign "$package"
      fi

      dl_start=$(now)

      showt "${CL_BLNK_YELLOW}↓ ${CL_NORM} ${package_name}"

      if [[ -n "$dest_dir" ]] ; then
        downloadFromRemoteHost "$package" "$dest_dir"
      else
        downloadFromRemoteHost "$package"
      fi

      grc_time=$(getGraceDurationShort "$dl_start")

      if [[ $? -eq 0 ]] ; then
        showt "${CL_GREEN}✔ ${CL_NORM} ${package_name} ${CL_DARK}${grc_time}${CL_NORM}"
      else
        showt "${CL_GREEN}✔ ${CL_NORM} ${package_name} ${CL_DARK}${grc_time} (ALREADY EXIST)${CL_NORM}"
      fi

      show ""
    done

    showSeparator "PACKAGE VALIDATION"

    has_errors=""

    for package in $packages ; do
      package=$(echo "$package" | tr -dc '[:print:]')
      package_name=$(basename "$package")
      package_file="$CWD/$package_name"

      [[ -n "$dest_dir" ]] && package_file="$dest_dir/$package_name"

      if ! validatePackage "$package_file" ; then
        has_errors=true
      fi
    done

    if [[ -n "$has_errors" ]] ; then
      doExit $ERROR_VALIDATE
    fi

    if [[ -n "$post" ]] ; then
      show "Executing post-build script…"
      # shellcheck disable=SC2091
      $($post)
    fi

    [[ -n "$bump" ]] && releaseBump "$CWD/$spec"

    show ""

    if [[ -n "$dest_dir" ]] ; then
      show "All rpm packages saved to a directory ${CL_BL_GREEN}${dest_dir}" $GREEN
    else
      show "All rpm packages saved to a current directory" $GREEN
    fi
  else
    error "Error! Can't build a package."

    if [[ -z "$verbose" ]] ; then
      error "Last $LOG_QUOTE_SIZE lines from build log:"

      showSeparator
      tail -${LOG_QUOTE_SIZE} "$tmp_output" 1>&2
      showSeparator
    fi

    if [[ -n "$keep_log" ]] ; then
      local ldate lname

      ldate=$(getLogDate)
      lname="${spec_name/.spec/}+$host+$ldate.log"

      cp "$tmp_output" "$CWD/$lname"

      show "Build log saved to a current directory as ${CL_BL_YELLOW}${lname}" $YELLOW
    fi

    doExit $ERROR_BUILD
  fi
}

# Uploads sources to remote build host
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
uploadSourcesToRemoteHost() {
  local spec="$1"

  local source_file source_file_name source_files rmpbuild_dir
  local copy_start grc_time

  rmpbuild_dir=$(getRPMBuildDir)
  source_files=$(find "$tmp_dir" -maxdepth 1 -type f | sort -h)

  for source_file in $source_files ; do
    source_file_name=$(basename "$source_file")
    copy_start=$(now)

    showt "${CL_BLNK_YELLOW}↑ ${CL_NORM} ${source_file_name}"

    scpCommand "$source_file" "$user@$host:$rmpbuild_dir/SOURCES/" &> $verb_output

    grc_time=$(getGraceDurationShort "$copy_start")
    
    showt "${CL_GREEN}✔ ${CL_NORM} ${source_file_name} ${CL_DARK}${grc_time}${CL_NORM}"
    show ""
  done

  copy_start=$(now)

  showt "${CL_BLNK_YELLOW}↑ ${CL_NORM} ${spec}"

  if [[ -n "$bump" ]] ; then
    cp "$spec" "$tmp_dir"

    releaseBump "$tmp_dir/$spec"
    scpCommand "$tmp_dir/$spec" "$user@$host:$rmpbuild_dir/SPECS/" &> $verb_output
  else
    scpCommand "$spec" "$user@$host:$rmpbuild_dir/SPECS/" &> $verb_output
  fi

  grc_time=$(getGraceDurationShort "$copy_start")
  showt "${CL_GREEN}✔ ${CL_NORM} ${spec} ${CL_DARK}${grc_time}${CL_NORM}"
  show ""

  rm -rf "$tmp_dir" &> /dev/null
}

# Downloads packages from remote build host
#
# 1: Package file (String)
# 2: Output directory (String)
#
# Code: No
# Echo: No
downloadFromRemoteHost() {
  local file="$1"
  local dir="$2"

  [[ -z "$dir" ]] && dir="$CWD"

  local file_name mod_ts

  file_name=$(basename "$file")

  if [[ -f $dir/$file_name ]] ; then
    mod_ts=$(stat -c "%Y" "$dir/$file_name")

    if [[ $mod_ts -ge $build_start && $mod_ts -le $build_end ]] ; then
      return 1
    else
      scpCommand "$user@$host:$file" "$dir" &> $verb_output
    fi
  else
    scpCommand "$user@$host:$file" "$dir" &> $verb_output
  fi
}

# Checks if remote build host is accessible
#
# Code: No
# Echo: No
checkRemoteAvailability() {
  local remote_available

  remote_available=$(sshCommand "$host" "stat $BUILD_LOCK &> /dev/null || echo 1")

  if [[ -z "$remote_available" ]] ; then
    showt "${CL_GREEN}Executing:${CL_NORM} ${CL_YELLOW}waiting in queue${CL_NORM}"

    while : ; do
      asyncSleep $CHECK_REMOTE_QUEUE_DELAY

      showt "${CL_GREEN}Executing:${CL_NORM} ${CL_CYAN}checking queue${CL_NORM}"

      remote_available=$(sshCommand "$host" "stat $BUILD_LOCK &> /dev/null || echo 1")

      if [[ -n "$remote_available" ]] ; then
        showt "${CL_GREEN}Executing:${CL_NORM} ${CL_YELLOW}~${CL_NORM}"
        break
      else
        showt "${CL_GREEN}Executing:${CL_NORM} ${CL_YELLOW}waiting in queue${CL_NORM}"
      fi
    done
  fi
}

# Signs packages on remote host
#
# *: Packages (String)
#
# Code: No
# Echo: No
remoteSign() {
  local package="$1"

  sshCommand "$host" "rpm --addsign $package &> /dev/null" 2> /dev/null
}

# Checks if parallel build is possible
#
# Code: No
# Echo: No
checkParallelBuildAvailability() {
  if ! hasParallelLock ; then
    return
  fi

  local cdt ct cdf

  cdt=$(stat $BUILD_LOCK_PARALLEL -c "%Y" 2> /dev/null)
  ct=$(now)
  cdf=$(( ct - cdt ))

  warn "Can't start parallel build"

  if [[ $cdf -gt $LOCK_TIME_MAX_DIFF ]] ; then
    show "  We found lock file created more than 3 hours ago. It's too much time for the usual build process." $YELLOW
    show "  If another build process doesn't occur, you must remove file $BUILD_LOCK_PARALLEL manually." $YELLOW
    show "  We will continue to build when this file will be removed." $YELLOW
  else
    show "  Another parallel build process in progress." $YELLOW
    show "  We will continue to build when another process complete." $YELLOW
  fi

  while : ; do
    asyncSleep $CHECK_LOCAL_QUEUE_DELAY

    if ! hasParallelLock ; then
      break
    fi
  done
}

# Checks if SSH connection to remote server works
#
# 1: Host (String)
#
# Code: Yes
# Echo: No
isSSHConnectionWorks() {
  if ! sshCommand "$1" "echo 2>&1" &> /dev/null ; then
    return 1
  fi

  return 0
}

# Checks if host is reachable
#
# 1: Host (String)
#
# Code: Yes
# Echo: No
isRemoteServerReachable() {
  local host="$1"

  # Check remote server using ping
  if type -P ping &>/dev/null ; then
    if ping -c 1 -w 5 "$host" &> /dev/null ; then
      return 0
    fi
  fi

  # If ICMP is blocked, use nc for check
  if type -P nc &>/dev/null ; then
    if nc -z "$host" 22 &>/dev/null ; then
      return 0
    fi
  fi

  return 1
}

# Returns options for SSH/SCP commands
#
# 1: SCP flag (Boolean)
#
# Code: No
# Echo: Options (String)
getSSHOpts() {
  local is_scp="$1"

  local opts

  if [[ -n "$key" ]] ; then
    opts="-i $key"
  else
    opts="-o PubkeyAuthentication=no"
  fi

  if [[ -n "$port" ]] ; then
    if [[ -z "$is_scp" ]] ; then
      opts="$opts -p $port"
    else
      opts="$opts -P $port"
    fi
  fi

  opts="$opts -o ControlPath=${tmp:?}/${CONNECTION_CACHE_PREFIX}-$$"
  opts="$opts -o ControlMaster=auto"
  opts="$opts -o ControlPersist=$CONNECTION_CACHE_PERSIST"
  opts="$opts $SSH_BASE_OPTS"

  echo "$opts"
}

# Checks if parallel build lock file exists
#
# Code: No
# Echo: No
hasParallelLock() {
  [[ ! -e $BUILD_LOCK_PARALLEL ]] && return 1

  local pid
  pid=$(cat "$BUILD_LOCK_PARALLEL")

  if [[ ! -d "/proc/$pid" ]] ; then
    if removeParallelLock ; then
      return 1
    fi
  fi

  return 0
}

# Creates lock file for parallel build
#
# Code: No
# Echo: No
createParallelLock() {
  echo "$$" 1> "$BUILD_LOCK_PARALLEL" 2> /dev/null
  chmod 666 "$BUILD_LOCK_PARALLEL" &> /dev/null
}

# Remove parallel build lock file
#
# Code: No
# Echo: No
removeParallelLock() {
  local cur_user lock_owner

  if [[ -f $BUILD_LOCK_PARALLEL ]] ; then
    cur_user=$(whoami)
    lock_owner=$(stat "$BUILD_LOCK_PARALLEL" -c "%U")

    if [[ "$cur_user" == "$lock_owner" ]] ; then
      rm -f "$BUILD_LOCK_PARALLEL" &> /dev/null
    fi
  fi
}

# Executes SSH command on remote host
#
# 1: Host (String)
# 2: Command (String)
# 3: Don't use password auth (String) [Optional]
#
# Code: No
# Echo: SSH command output (String)
sshCommand() {
  local host="$1"
  local comm="$2"
  local no_pass="$3"

  local ssh_opts
  ssh_opts=$(getSSHOpts)

  if [[ -n "$key" ]] ; then
    no_pass=true
  fi

  if [[ -n "$pass" && -z "$no_pass" ]] ; then
    sshpass -p "$pass" ssh -t -t -q $ssh_opts "$user@$host" "$comm"
  else
    # shellcheck disable=SC2029
    ssh -t -t -q $ssh_opts "$user@$host" "$comm"
  fi

  return $?
}

# Copies file using SCP
#
# 1: From (String)
# 2: To (String)
#
# Code: No
# Echo: No
scpCommand() {
  local from="$1"
  local to="$2"

  local ssh_opts
  ssh_opts=$(getSSHOpts true)

  if [[ -n "$pass" ]] ; then
    sshpass -p "$pass" scp -q $ssh_opts "$from" "$to"
  else
    scp -q $ssh_opts "$from" "$to"
  fi

  return $?
}

# Parses and extracts host info
#
# 1: URL (String)
#
# Code: No
# Echo: Host properties (String)
extractHostInfo() {
  local url="$1"
  local user pass port arch

  if [[ "$url" =~ \~ ]] ; then
    arch=$(echo "$url" | cut -f2 -d"~")
    url=$(echo "$url" | cut -f1 -d"~")
  fi

  if [[ "$url" =~ \@ ]] ; then
    user=$(echo "$url" | cut -f1 -d"@")
    url=$(echo "$url" | cut -f2 -d"@")

    if [[ "$user" =~ \: ]] ; then
      pass=$(echo "$user" | cut -f2 -d":")
      user=$(echo "$user" | cut -f1 -d":")
    fi
  fi

  if [[ "$url" =~ \: ]] ; then
    port=$(echo "$url" | cut -f2 -d":")
    url=$(echo "$url" | cut -f1 -d":")
  fi

  echo "${url:-!} ${port:-!} ${user:-!} ${pass:-!} ${arch:-!}"
}

# Check if URL is valid host info
#
# 1: URL (String)
#
# Code: Yes
# Echo: No
validateHostInfo() {
  local host_info r_host r_port r_user r_pass r_arch

  IFS=" " read -r -a host_info <<< "$(extractHostInfo "$1")"

  r_host="${host_info[0]/!/}"
  r_port="${host_info[1]/!/}"
  r_user="${host_info[2]/!/}"
  r_pass="${host_info[3]/!/}"
  r_arch="${host_info[4]/!/}"

  if [[ -n "$r_port" ]] ; then
    if ! isNum "$r_port" ; then
      error "Can't start remote build process: remote server port must be a number"
      return 1
    fi
  fi

  if [[ -n "$r_pass" ]] ; then
    if ! hasApp "sshpass" ; then
      error "Can't start remote build process: remote server info contains password, using passwords requires sshpass"
      return 1
    fi
  fi

  if [[ -z "$r_host" ]] ; then
    error "Can't start remote build process: can't parse remote server info"
    return 1
  fi

  return 0
}

# Function description
#
# 1: Path to file with nodes (String)
#
# Code: No
# Echo: Node list (String)
filterNodeList() {
  if [[ -z "$node" ]] ; then
    awk 1 "$1"
    return
  fi

  local remote_host line_num index indices
  local result=()

  declare -A indices

  for index in ${node//,/ } ; do
    if isNum "$index" ; then
      indices[$index]=true
    fi
  done

  while read -r remote_host ; do
    (( line_num++ ))

    if [[ -n "${indices[$line_num]}" ]] ; then
      result+=("$remote_host")
    fi

  done < <(awk 1 "$1")

  echo "${result[@]}"
}
