#!/bin/bash
# shellcheck disable=SC1117,SC2034,SC2086,SC2154,SC2181

################################################################################

# Check if given file is spec file
#
# 1: Path to spec file (String)
#
# Code: Yes
# Echo: No
isSpecFile() {
  if [[ ! -r "$1" ]] ; then
    return 1
  fi

  if [[ ! -s "$1" ]] ; then
    return 1
  fi

  if ! grep -q "%prep" "$1" ; then
    return 1
  fi

  return 0
}

# Read options from spec file
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
readInspecOptions() {
  local spec="$1"
  local opt line optn

  while read -r line ; do
    IFS=" " read -ra opt <<< "$line"

    optn="${opt[0]//-/_}"

    if [[ -z "${!optn}" && $INSPEC_OPTS\  =~ $optn\  ]] ; then
      eval "$optn=${opt[*]:1:99}"
    fi
  done < <(grep "$INSPEC_OPT_PREFIX" "$spec" | sed "s/# \?$INSPEC_OPT_PREFIX//g" | tr -s " ")
}

# Get sources
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: Sources list (String)
getSources() {
  local opts

  if [[ -n "$define" ]] ; then
    opts=$(getDefineOpts)
  fi

  eval "spectool -n -S $opts $1" 2>/dev/null | cut -f2 -d" "
}

# Get patches
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: Patches list (String)
getPatches() {
  local opts

  if [[ -n "$define" ]] ; then
    opts=$(getDefineOpts)
  fi

  eval "spectool $opts -n -P $1" 2>/dev/null | cut -f2 -d" "
}

# Bump version in spec after successful build
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
releaseBump() {
  local spec="$1"

  if [[ -n "$bump_comment" ]] ; then
    rpmdev-bumpspec -c "$bump_comment" "$spec"
  else
    rpmdev-bumpspec "$spec"
  fi

  if [[ $? -ne 0 ]] ; then
    error "Can't bump release - bumpspec return error code" $YELLOW
  fi
}
