#!/bin/bash
# shellcheck disable=SC1117,SC2034,SC2086,SC2119,SC2120,SC2154,SC2181

################################################################################

require "build-local"
require "build-remote"
require "observer"
require "package"
require "sources"
require "spec"
require "utils"

################################################################################

# Start build process
#
# *: All options passed to script
#
# Code: No
# Echo: No
startBuild() {
  local spec="$1"
  local err

  if ! isSpecFile "$spec" ; then
    if isSpecFile "${spec}.spec" ; then
      [[ -r "${spec}.source" && -z "$source_list" ]] && source_list="$spec.source"
      spec="${spec}.spec"
    else
      err=$(validateSpec "$spec")
      error "${CL_BL_RED}${spec}${CL_RED} is not a spec file!${CL_NORM}"
      error "${CL_BL_RED}${err}${CL_NORM}"
      doExit $ERROR_SPEC
    fi
  fi

  checkOptions

  trap termExit SIGINT SIGQUIT SIGTERM SIGHUP

  if [[ -z "$download" && -n "$parallel" ]] && isNodeList "$remote" ; then
    parallelBuild "$@"
  else
    basicBuild "$@"
  fi

  doExit
}

# Start basic build
#
# *: All options passed to utility
#
# Code: No
# Echo: No
basicBuild() {
  local start_ts
  start_ts=$(now)

  if [[ -n "$tmux_worker" ]] ; then
    if [[ -n "$TMUX" ]] ; then
      tmux set-option -p -t "$TMUX_PANE" @custom_pane_title "$remote"
    fi

    createWorkerLock
  fi

  if [[ "$download" == "true" ]] ; then
    download=$(findSourcesDir)
  fi

  [[ -n "$dest" ]]     && dest_dir="$dest"
  [[ -n "$dest_dir" ]] && dest_dir=$(getAbsPath "$dest_dir")
  [[ -n "$dlcache" ]]  && dlcache=$(getAbsPath "$dlcache")
  [[ -n "$download" ]] && dlcache=$(getAbsPath "$download")

  [[ -n "$key" && -r "$HOME/.ssh/$key" ]] && key="$HOME/.ssh/$key"

  makeTemp

  if [[ -n "$verbose" ]] ; then
    verbose=true
    verb_output=/dev/stdout
  fi

  readInspecOptions "$spec"
  checkOptions

  [[ -n "${github}${bitbucket}${launchpad}" ]] && parseSourceURL "$spec"

  [[ -n "$github" ]]    && fetchSourcesFromGithub
  [[ -n "$bitbucket" ]] && fetchSourcesFromBitbucket
  [[ -n "$launchpad" ]] && fetchSourcesFromLaunchpad

  if [[ -n "$download" ]] ; then
    downloadRemoteSources "$spec"
  else
    if [[ -n "$remote" ]] ; then
      remoteBuild "$spec"
    else
      localBuild "$spec"
    fi
  fi

  if [[ -n "$tmux_worker" ]] ; then
    removeWorkerLock
  fi

  notify "$start_ts"
}

# Process spec file
#
# 1: Path to spec file (String)
#
# Code: No
# Echo: No
processSpec() {
  local spec="$1"

  local source_list patch_list files source_file
  local source_num file_name found_source gen_crc

  source_list=$(getSources "$spec")
  patch_list=$(getPatches "$spec")

  files="$source_list $patch_list"

  source_num=0

  for source_file in $files ; do
    if [[ -n "${svn}${git}${hg}${bzr}" ]] ; then
      [[ $source_num -eq 0 ]] && ((source_num++)) && continue
    fi

    if [[ "$source_file" =~ (http|https|ftp) ]] ; then
      file_name=$(basename "$source_file")
      found_source=$(findSource "$file_name")

      if [[ -n "$found_source" ]] ; then
        cp "$found_source" "$tmp_dir"
        show "${CL_GREY}+${CL_NORM} $file_name ${CL_DARK}($(getGraceFileSize "$tmp_dir/$file_name"))${CL_NORM}"
      elif [[ -f "$tmp_dir/$file_name" ]] ; then
        show "${CL_GREY}+${CL_NORM} $file_name ${CL_DARK}($(getGraceFileSize "$tmp_dir/$file_name"))${CL_NORM}"
      elif [[ -n "$dlcache" ]] ; then
        if [[ -f "$dlcache/$file_name" ]] ; then
          cp "$dlcache/$file_name" "$tmp_dir"
          show "${CL_GREY}+${CL_NORM} $file_name ${CL_DARK}($(getGraceFileSize "$tmp_dir/$file_name"))${CL_NORM}"
        else
          show "Downloading source file ${CL_CYAN}${source_file}${CL_NORM}…"

          downloadSource "$source_file" "$dlcache"

          if [[ $? -ne 0 ]] ; then
            error "Error! Can't download file ${CL_BL_RED}${source_file}${CL_RED}."
            doExit $ERROR_SOURCE
          fi

          cp "$dlcache/$file_name" "$tmp_dir"

          show "${CL_GREY}+${CL_NORM} ${file_name} ${CL_DARK}($(getGraceFileSize "$tmp_dir/$file_name"))${CL_NORM}"
        fi
      else
        show "Downloading source file ${CL_CYAN}${source_file}${CL_NORM}…"

        downloadSource "$source_file" "$tmp_dir"

        if [[ $? -ne 0 ]] ; then
          error "Error! Can't download file ${CL_BL_RED}${source_file}${CL_RED}."
          doExit $ERROR_SOURCE
        fi

        show "${CL_GREY}+${CL_NORM} ${file_name} ${CL_DARK}($(getGraceFileSize "$tmp_dir/$file_name"))${CL_NORM}"
      fi
    else
      if [[ -f "$tmp_dir/$source_file" ]] ; then
        show "${CL_GREY}+${CL_NORM} ${source_file} ${CL_DARK}($(getGraceFileSize "$tmp_dir/$source_file"))${CL_NORM}"
        source_num=$(( source_num + 1 ))
        continue
      fi

      local source_ext source_name found_dir found_source

      source_ext=$(getArchExt "$source_file")
      source_name=$(getArchName "$source_file")
      found_dir=$(findSource "$source_name" true)
      found_source=$(findSource "$source_file")

      if [[ "$source_file" == "$CHECKSUM_FILE" && -z "$found_source" ]] ; then
        gen_crc=true
        continue
      fi

      if [[ -n "$source_ext" && -n "$found_dir" ]] ; then
        packDir "$found_dir/$source_name" "$source_ext"
        mv "$found_dir/$source_file" "$tmp_dir"

        show "${CL_GREY}+${CL_NORM} ${source_file} ${CL_DARK}($(getGraceFileSize "$tmp_dir/$source_file"))${CL_NORM}"

        source_num=$(( source_num + 1 )) && continue
      elif [[ -n "$found_source" ]] ; then
        cp "$found_source" "$tmp_dir"
        show "${CL_GREY}+${CL_NORM} ${source_file} ${CL_DARK}($(getGraceFileSize "$tmp_dir/$source_file"))${CL_NORM}"

        source_num=$(( source_num + 1 )) && continue
      else
        error "Can't use file ${CL_BL_RED}${source_file}${CL_RED} for build - file not found in sources directory"
        doExit $ERROR_SOURCE
      fi
    fi

    source_num=$(( source_num + 1 ))
  done

  if [[ -n "$gen_crc" ]] ; then
    if ! generateChecksumFile ; then
      error "Can't generate file with checksums"
      doExit $ERROR_SOURCE
    fi
  fi

  if ! validateSources ; then
    doExit $ERROR_SOURCE
  fi
}

# Check given command-line options
#
# Code: No
# Echo: No
checkOptions() {
  if [[ -n "$parallel" && -z "$remote" ]] ; then
    error "Cannot start build process: remote build server not defined"
    doExit $ERROR_ARGS
  fi

  if ! hasApp "perfecto" && [[ -n "$perfect" ]] ; then
    error "Cannot start build process: for using --perfect option, you must install perfecto first"
    doExit $ERROR_DEPS
  fi

  if [[ -n "$dest_dir" && ! -d $dest_dir ]] ; then
    error "Cannot start build process: destination directory doesn't exist"
    doExit $ERROR_ARGS
  fi

  if [[ -n "$dlcache" && ! -d $dlcache ]] ; then
    error "Cannot start build process: download cached directory doesn't exist"
    doExit $ERROR_ARGS
  fi

  if [[ -n "$remote" ]] ; then
    if ! validateRemotetInfo "$remote" ; then
      doExit $ERROR_ARGS
    fi
  fi

  if ! hasApp "tmux" && [[ -n "$parallel" ]] ; then
    error "Cannot start build process: parallel build requires tmux, you need to install it first"
    doExit $ERROR_DEPS
  fi

  if ! hasApp "git" && [[ -n "$git" ]] ; then
    error "Cannot start build process: to use the --git option, you must first install git"
    doExit $ERROR_DEPS
  fi

  if ! hasApp "svn" && [[ -n "$svn" ]] ; then
    error "Cannot start build process: to use the --svn option, you must first install svn"
    doExit $ERROR_DEPS
  fi

  if ! hasApp "hg" && [[ -n "$hg" ]] ; then
    error "Cannot start build process: to use the --hg option, you must first install mercurial"
    doExit $ERROR_DEPS
  fi

  if ! hasApp "bzr" && [[ -n "$bzr" ]] ; then
    error "Cannot start build process: to use the --bzr option, you must first install bazaar"
    doExit $ERROR_DEPS
  fi

  if ! hasApp "gopack" && [[ -n "$gopack" ]] ; then
    error "Cannot start build process: to use the --gopack option, you must first install gopack"
    doExit $ERROR_DEPS
  fi

  if ! hasApp "rpmbuild" "rpmlint" && [[ -z "$remote" ]] ; then
    error "Cannot start local build process: rpmbuild and rpmlint are required"
    doExit $ERROR_DEPS
  fi

  if ! hasApp "rpm" && [[ -n "$sign" && -z "$remote" ]] ; then
    error "Cannot start local build process: for signing packages you must install rpm first"
    doExit $ERROR_DEPS
  fi

  if ! hasApp "spectool" ; then
    error "Cannot start local build process: spectool (part of rpmdevtools) is required"
    doExit $ERROR_DEPS
  fi

  if [[ ! -d $tmp ]] ; then
    error "Cannot start build process: temp directory doesn't exist"
    doExit $ERROR_UNKNOWN
  fi

  if [[ -n "$dlcache" && ! -d $dlcache ]] ; then
    error "Cannot start build process: download cache directory doesn't exist"
    doExit $ERROR_UNKNOWN
  fi

  if [[ -n "$bump" ]] ; then
    if ! hasApp "rpmdev-packager" "rpmdev-bumpspec" ; then
      error "Cannot start build process: for automatic release bumping you must install"
      error "rpmdev-bumpspec and rpmdev-packager (from rpmdevtools package) first"
      doExit $ERROR_DEPS
    fi

    packager=$(rpmdev-packager)

    if [[ -z "$packager" ]] ; then
      error "Cannot start build process: for automatic release bumping you must define %packager"
      error "(name + email e.g. \"%packager John Smith <mail@smith.com>\") value in file ~/.rpmmacros"
      doExit $ERROR_UNKNOWN
    fi
  fi
}

# Print message and exit from utility
#
# 1: Error message (String)
#
# Code: No
# Echo: No
printErrorAndExit() {
  error "$*"
  doExit $ERROR_UNKNOWN
}

# Ring the bell
#
# Code: No
# Echo: No
notify() {
  [[ -n "$notify" ]] && printf "\a" && return

  local start_ts end_ts time_diff

  start_ts=$1
  end_ts=$(now)
  time_diff=$(( end_ts - start_ts ))

  [[ $time_diff -ge $LONG_BUILD ]] && printf "\a"
}

# Clean temporary data
#
# Code: No
# Echo: No
clean() {
  if [[ -e "$tmp_dir" ]] ; then
    rm -rf "$tmp_dir"
  fi

  if [[ -e "$tmp_output" ]] ; then
    rm -f "$tmp_output"
  fi

  if [[ -e "$tmp_key_file" ]] ; then
    rm -f "$tmp_key_file"
  fi

  cleanGarbage
}

# Remove old temporary data
#
# 1: Force remove (Boolean) [Optional]
#
# Code: Yes
# Echo: No
cleanGarbage() {
  if [[ -n "$1" ]] ; then
    find "${tmp:?}" -maxdepth 1 -name "$TMP_PREFIX-*" -user "$USER" -exec rm -rf {} \; &> /dev/null
  else
    find "${tmp:?}" -maxdepth 1 -name "$TMP_PREFIX-*" -user "$USER" -mtime +1 -exec rm -rf {} \; &> /dev/null
  fi

  return $?
}

# Exit from script
#
# 1: Exit code (Number)
#
# Code: No
# Echo: No
doExit() {
  clean

  stopStatusObserver

  if [[ -n "$tmux_worker" ]] ; then
    if [[ -z "$1" || "$1" == "0" ]] ; then
      asyncSleep $TMUX_OK_SLEEP
    else
      [[ -z "$keep_log" || $1 -eq $ERROR_VALIDATE ]] && asyncSleep $TMUX_ERROR_SLEEP
    fi
  fi

  if [[ -n "$tmux_worker" ]] ; then
    removeWorkerLock
  fi

  exit "${1:-0}"
}

# TERM/INT/QUIT/HUP signal handler
#
# Code: No
# Echo: No
termExit() {
  if [[ -n "$parallel_build" ]] ; then
    if hasWorkers ; then
      killAllWorkers
    fi
  fi

  clean

  if hasLocalLock ; then
    removeLocalLock
  fi

  if [[ -z "$tmux_worker" ]] ; then
    if hasParallelLock ; then
      removeParallelLock
    fi
  else
    removeWorkerLock
  fi

  [[ -n "$observer_pid" ]] && stopStatusObserver

  exit $ERROR_UNKNOWN
}

# Get path to build dir
#
# Code: No
# Echo: Path to build dir (String)
getRPMBuildDir() {
  if [[ "$user" == "root" ]] ; then
    echo "/root/rpmbuild"
  else
    echo "/home/$user/rpmbuild"
  fi
}

# Convert utility options to yum options
#
# 1: Verbose mode (Boolean) [Options]
#
# Code: No
# Echo: Options (String)
getYumOpts() {
  local verb="$1"
  local opts repo pkg

  if [[ -n "$enable_repo" ]] ; then
    for repo in $enable_repo ; do
      opts="$opts --enablerepo=$repo"
    done
  fi

  if [[ -n "$disable_repo" ]] ; then
    for repo in $disable_repo ; do
      opts="$opts --disablerepo=$repo"
    done
  fi

  if [[ -n "$exclude_package" ]] ; then
    for pkg in $exclude_package ; do
      opts="$opts --exclude=$pkg"
    done
  fi

  echo "$opts"
}

# Convert utility options to rpmbuild options
#
# Code: No
# Echo: Options (String)
getBuildOpts() {
  local opts=""

  if [[ -n "$no_source" ]] ; then
    opts="-bb"
  elif [[ -n "$no_binary" ]] ; then
    opts="-bs"
  else
    opts="-ba"
  fi

  [[ -n "$no_build" ]] && opts="$opts --nobuild"
  [[ -n "$no_deps" ]] && opts="$opts --nodeps"
  [[ -z "$no_clean" ]] && opts="$opts --rmspec --rmsource --clean"
  [[ -n "$arch" ]] && opts="$opts --target=$arch"
  [[ -n "$with" ]] && opts="$opts $(getBuildOptsWith)"
  [[ -n "$without" ]] && opts="$opts $(getBuildOptsWithout)"
  [[ -n "$verbose" ]] && opts="$opts --verbose"

  if [[ -n "$define" ]] ; then
    opts="$opts $(getDefineOpts)"
  fi

  echo "$opts"
}

# Get options with macro definitions
#
# Code: No
# Echo: Options (String)
getDefineOpts() {
  local opts macros_def

  if [[ -n "$define" ]] ; then
    for macros_def in $define ; do
      opts="--define=\"${macros_def/=/ }\" ${opts}"
    done
  fi

  echo "${opts% }"
}

# Get build prefix
#
# Code: No
# Echo: Prefix (String)
getBuildPrefix() {
  local prfx="LC_ALL=C"

  # shellcheck disable=SC2007
  [[ -n "$qa_rpaths" ]] && prfx="$prfx QA_RPATHS=$[ ${qa_rpaths//,/|} ]"

  echo "$prfx"
}

# Convert utility 'with' options to rpmbuilder --with option
#
# Code: No
# Echo: Options list (String)
getBuildOptsWith() {
  local opts wopt

  for wopt in $with ; do
    opts="$opts --with $wopt"
  done

  echo "$opts"
}

# Convert utility 'without' options to rpmbuilder --without option
#
# Code: No
# Echo: Options list (String)
getBuildOptsWithout() {
  local opts wopt

  for wopt in $without ; do
    opts="$opts --without $wopt"
  done

  echo "$opts"
}
