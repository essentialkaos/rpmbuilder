#!/bin/bash
# shellcheck disable=SC1117,SC2034,SC2086,SC2154,SC2181

################################################################################

# Check if there are some workers working on the system
#
# Code: Yes
# Echo: No
hasWorkers() {
  if [[ $(find "${tmp:?}" -maxdepth 1 -name "$WORKER_PREFIX-*" -user "$USER" -print | wc -l) == "0" ]] ; then
    return 1
  fi

  return 0
}

# Kill all workers
#
# Code: No
# Echo: No
killAllWorkers() {
  local lock_files lock_file pid

  # shellcheck disable=SC2207
  lock_files=($(find "${tmp:?}" -maxdepth 1 -name "$WORKER_PREFIX-*" -user "$USER" -print))

  for lock_file in "${lock_files[@]}" ; do
    pid=$(cat "$lock_file")
    rm -f "$lock_file"

    if [[ -z "$pid" || ! -e "/proc/$pid" ]] ; then
      continue
    fi

    kill -9 "$pid"
  done
}

# Create lock file for worker
#
# 1: Worker UID (String)
#
# Code: No
# Echo: No
createWorkerLock() {
  local wid="$tmux_worker"
  local lock_file

  if ! hasWorkerLock "$wid" ; then
    lock_file=$(getPathToWorkerLock "$wid")
    echo "$$" 1> "$lock_file" 2> /dev/null
    chmod 666 "$lock_file" &> /dev/null
  fi
}

# Remove worker lock
#
# 1: Worker UID (String)
#
# Code: No
# Echo: No
removeWorkerLock() {
  local wid="$tmux_worker"
  local lock_file

  if hasWorkerLock "$wid" ; then
    lock_file=$(getPathToWorkerLock "$wid")
    rm -f "$lock_file" &> /dev/null
  fi
}

# Checks if worker lock exists
#
# 1: Worker UID (String)
#
# Code: Yes
# Echo: No
hasWorkerLock() {
  local wid="$1"
  local lock_file pid

  lock_file=$(getPathToWorkerLock "$wid")

  if [[ ! -e "$lock_file" ]] ; then
    return 1
  fi

  pid=$(cat "$lock_file")

  if [[ ! -e "/proc/$pid" ]] ; then
    rm -f "$lock_file" &> /dev/null
    return 1
  fi

  if [[ $(readlink "/proc/$pid/fd/0") =~ deleted ]] ; then
    rm -f "$lock_file" &> /dev/null
    kill -9 "$pid"
    return 1
  fi

  return 0
}

# Get path to lock file with worker PID
#
# 1: Worker UID (String)
#
# Code: No
# Echo: Path to lock file (String)
getPathToWorkerLock() {
  echo "${tmp:?}/$WORKER_PREFIX-$wid"
}

# Block script execution till all workers complete build
#
# *: List of workers ids
#
# Code: No
# Echo: No
waitTillWorkersComplete() {
  local wid has_lock lock_file

  show "Waiting till remote builds ($#) completeâ€¦" $GREY

  while : ; do
    sleep 1

    has_lock=""

    for wid in "$@" ; do
      if hasWorkerLock "$wid" ; then
        has_lock=true
      fi
    done

    if [[ -z "$has_lock" ]] ; then
      break
    fi
  done

  cleanGarbage true
}
