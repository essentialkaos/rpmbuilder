#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2034,SC2154

# Utility name (String)
APP="RPMBuilder"

# Utility version (String)
VER="2.4.2"

####################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[0m"
CL_BOLD="\e[0;${BOLD};49m"
CL_UNLN="\e[0;${UNLN};49m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_YELLOW="\e[0;${YELLOW};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_DARK="\e[0;${DARK};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_YELLOW="\e[1;${YELLOW};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"

ERROR_UNKNOWN=1
ERROR_ARGS=2
ERROR_SPEC=3
ERROR_SOURCE=4
ERROR_BUILD=5
ERROR_LINT=6
ERROR_REMOTE=7
ERROR_DEPS=8
ERROR_VALIDATE=9

# Prefix for in spec options
INSPEC_ARG_PREFIX="rpmbuilder:"

# User Agent used for all HTTP requests (String)
USER_AGENT="$APP/$VER"

SEPARATOR="----------------------------------------------------------------------------------------"

###############################################################################

# Path to preferencies file
PREFS_FILE="$HOME/.rpmbuilder"

SUPPORTED_ARGS="remote !parallel host user pass key source_dir source_list 
 !sign !no_build !no_clean !no_deps !no_lint !no_source pack !attach 
 pre post dest dest_dir upload git svn hg bzr branch revision tag svn_user 
 svn_pass path !bump bump_comment tmp dlcache !depinstall !dep_install github 
 bitbucket launchpad with without define output !verbose !help !usage !ver 
 !version !raw_version qa_rpaths tmux_worker !no_colors !keep_log !notify 
 arch download !relative_pack enable_repo disable_repo exclude_package gopack 
 !no_validate !strict !pedantic !perfect"

SHORT_ARGS="r:remote P:!parallel hh:host uu:user pp:pass kk:key sd:source_dir 
 sl:source_list NB:!no_build NC:!no_clean ND:!no_deps NR:!no_binary NS:!no_source 
 p:pack 0:!no_lint 1:!strict 2:!pedantic 3:!perfect pr:pre ps:post d:dest u:upload 
 su:svn_user sp:svn_pass rp:path b:!bump bc:bump_comment dc:dlcache 
 di:!depinstall rb:branch rt:tag rr:revision gh:github bb:bitbucket lp:launchpad 
 w:with W:without s:!sign D:define O:output V:!verbose h:help v:!version 
 nv:!no_validate nc:!no_colors kl:!keep_log n:!notify a:arch dl:download 
 R:relative_pack ER:enable_repo DR:disable_repo EX:exclude_package G:gopack 
 A:!attach"

INSPEC_ARGS="git svn hg bzr branch revision tag svn_user svn_pass github 
 bitbucket launchpad qa_rpaths no_lint no_validate relative_pack gopack strict 
 pedantic perfect"

MERGEABLE_ARGS="pack with without enable_repo disable_repo exclude_package define"

KEEP_ARGS=true

###############################################################################

# Path to libexec directory
LIBEXEC_DIR="/usr/libexec/rpmbuilder"

# List of supported archive types (String)
SUPPORTED_ARCH_TYPES="tbz2 tar.bz2 tgz tar.gz tbz tar.bz txz tar.xz"

# Wait delay after successful build in seconds (Number)
TMUX_OK_SLEEP=5

# Wait delay after errored build in seconds (Number)
TMUX_ERROR_SLEEP=1800

# tmux session name
TMUX_SESSION_NAME="rpmbuilder"

# Wait delay after spec linting in seconds (Number)
LINT_WAIT=3

# Maximum duration for "normal" download in seconds (Number)
LONG_DOWNLOADING=60

# Maximum duration for "normal" build in seconds (Number)
LONG_BUILD=300

# Name of build lock file (String)
BUILD_LOCK=".buildlock"

# Default builder home directory (String)
BUILDER_HOME="/home/builder"

# Path to local build lock file (String)
BUILD_LOCK_LOCAL="/tmp/rpmbuilder-local-lock"

# Path to parallel local build lock file (String)
BUILD_LOCK_PARALLEL="/tmp/rpmbuilder-parallel-lock"

# Max lock file lifetime in seconds (Number)
LOCK_TIME_MAX_DIFF=10800 # 3 Hours

# Base SSH options (String)
SSH_BASE_OPTS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet"

# Local build queue check delay in seconds (Number)
CHECK_LOCAL_QUEUE_DELAY=2

# Remote build queue check delay in seconds (Number)
CHECK_REMOTE_QUEUE_DELAY=15

# Max log quote size in lunes (Number)
LOG_QUOTE_SIZE=50

# Max repository (git/svn/hg/bzr) log quote size in lunes (Number)
REPO_LOG_QUOTE_SIZE=25

# List of possible used directory names for sources (String)
SOURCE_PATHS=". SOURCES SOURCE sources source src"

# Current working dir (String)
CWD=$(pwd)

# Template used for temporary directory name generation (String)
TMP_DIR_TEMPLATE="rpmbuilder-XXXXXXXX"

# Template used for temporary output file name generation (String)
TMP_OUT_TEMPLATE="rpmbuilder-XXXXXXXX.out"

###############################################################################

# Path to directory with temporary data (String)
tmp="/tmp"

# Path to temporary directory for current build (String)
tmp_dir=""

# Path to temporary output file for current build (String)
tmp_output=""

# Current user name (String)
user=$(whoami)

# Packager name (String)
packager=""

verb_output=/dev/null

build_start=0
build_end=0

declare -A _requires

###############################################################################

# Main function
#
# Code: No
# Echo: No
main() {
  if [[ ! -t 1 || -n "$no_colors" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_DARK
    unset CL_CYAN CL_GREY CL_DARK CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE
    unset CL_BL_MAG CL_BL_CYAN CL_BL_GREY
  fi

  [[ -n "$raw_version" ]] && echo $VER && exit 0
  [[ -n "$ver" || -n "$version" ]] && about && exit 0
  [[ $# -eq 0 || -n "$help" || -n "$usage" ]] && usage && exit 0

  if [[ $(id -u) == "0" ]] ; then
    show "You should not be building packages as the superuser!" $YELLOW
    exit 1
  fi

  # Attach to TMUX build session
  if [[ -n "$attach" ]] ; then
    tmux attach -t "$TMUX_SESSION_NAME"
    exit $?
  fi

  require "build"

  startBuild "$@"
}

# Load libexec script
#
# 1: Script name without extension (String)
#
# Code: No
# Echo: No
require() {
  local script="${1}.shx"

  # File already loaded, skip it
  if [[ "${_requires[$script]}" -eq 1 ]] ; then
    return
  fi

  if [[ ! -e "$LIBEXEC_DIR/$script" ]] ; then
    error "Can't find file $script in libexec directory ($LIBEXEC_DIR)"
    exit 1
  fi

  if [[ ! -r "$LIBEXEC_DIR/$script" ]] ; then
    error "File $LIBEXEC_DIR/$script is not readable"
    exit 1
  fi

  if [[ ! -s "$LIBEXEC_DIR/$script" ]] ; then
    error "File $LIBEXEC_DIR/$script is empty"
    exit 1
  fi

  _requires[$script]=1

  # shellcheck disable=SC1090
  source "$LIBEXEC_DIR/$script"
}

# Print message
#
# 1: Message (String)
# 2: Color code (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print message without new lines symbol
#
# 1: Message (String)
# 2: Color code (Number) [Optional]
#
# Code: No
# Echo: No
showm() {
  if [[ -n "$2" ]] ; then
    echo -e -n "\e[${2}m${1}\e[0m"
  else
    echo -e -n "$*"
  fi
}

# Print temporary message
#
# 1: Message (String)
#
# Code: No
# Echo: No
showt() {
  local message offset spaces adds

  message=$(echo "$1" | sed -r "s/\\\e\[([0-9;]{1,12}m)//g")
  offset="${2-0}"
  spaces="                                                                                      "

  adds=$((${#SEPARATOR} - ${#message} - offset))

  echo -e -n "${1}${spaces:0:$adds}"
}

# Print option usage info
#
# 1: Option name (String)
# 2: Option description (String)
# 3: Option optional flag (Boolean) [Optional]
#
# Code: No
# Echo: No
showo() {
  local optn optd optp optt optf breadcrumbs

  optn="$1"
  optd="$2"
  optp="$3"

  if [[ -n "$DARK" ]] ; then
    breadcrumbs="............................"
  else
    breadcrumbs="                            "
  fi

  if [[ -z "$optp" ]] ; then
    optt="$optn"
    optf=$(( 31 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  else
    optt="$optn $optp"
    optf=$(( 31 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_GREY}${optp}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  fi
}

# Print error message
#
# 1: Message (String)
#
# Code: No
# Echo: No
error() {
  show "$@" $RED 1>&2
}

# Show message about unknown option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showArgWarn() {
  error "Error! Unknown option $1"
  exit 1
}

###############################################################################

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} rpmbuilder ${CL_YELLOW}{spec-file}${CL_NORM} ${CL_GREEN}{options}${CL_NORM}"
  show ""
  show "${CL_BOLD}Spec file:${CL_NORM}"
  show ""
  show "  You can define absolute or relative path to spec file. You also can define only spec name (without extension)."
  show "  In this case, rpmbuilder try use ${CL_YELLOW}{name}${CL_NORM}.spec file for build and try to find ${CL_YELLOW}{name}${CL_NORM}.source file and use as "
  show "  sources list."
  show ""
  show "Source packaging:" $BOLD
  show ""
  showo "--pack, -p" "Pack specified files to archive with default source name ${CL_DARK}(mergeable)${CL_NORM}" "files"
  showo "--relative-pack, -R" "Use relative path in source archive instead of absolute"
  showo "--source-dir, -sd" "Path to a directory which contains source files specified in spec file" "path"
  showo "--source-list, -sl" "Path to file which contains a list of source files specified in spec file" "file"
  showo "--dlcache, -dc" "Path to a directory for downloads caching" "dir"
  showo "--download, -dl" "Download all remote sources to a specified directory" "dir"
  showo "--no-validate, -nv" "Don't validate sources"
  show ""
  showo "--git" "Fetch sources from Git repository" "url"
  showo "--svn" "Fetch sources from SVN repository" "url"
  showo "--hg" "Fetch sources from Mercurial repository" "url"
  showo "--bzr" "Fetch sources from Bazar repository" "url"
  showo "--path, -rp" "Path to a directory with sources in repository" "path"
  showo "--branch, -rb" "Use specified repository branch" "branch"
  showo "--revision, -rr" "Use specified revision" "rev"
  showo "--tag, -rt" "Use specified tag" "tag"
  showo "--svn-user, -su" "Username for access to SVN repository" "username"
  showo "--svn-pass, -sp" "Password for access to SVN repository" "password"
  show ""
  showo "--github, -gh" "Fetch sources from github.com repository by url" "url"
  showo "--github, -gh" "Fetch sources from github.com repository by user and project" "user:project"
  showo "--github, -gh" "Fetch sources from github.com repository by user and project" "user/project"
  showo "--bitbucket, -bb" "Fetch sources from bitbucket.org repository by url" "url"
  showo "--bitbucket, -bb" "Fetch sources from bitbucket.org repository by user and project" "user:project"
  showo "--bitbucket, -bb" "Fetch sources from bitbucket.org repository by user and project" "user/project"
  showo "--launchpad, -lp" "Fetch sources from launchpad.net repository by url" "url"
  showo "--launchpad, -lp" "Fetch sources from launchpad.net repository by project name" "project-name"
  show ""
  showo "--gopack, -G" "Fetch and pack golang sources using gopack" "url"
  show ""
  show "  Examples:" $BOLD
  show ""
  show "    rpmbuilder package.spec -sl sources/current -d ~/mypackages" $GREY
  show "    rpmbuilder package.spec --source-list files.list --dest ~/mypackages" $GREY
  show "    rpmbuilder package.spec --pack \"file1 file2 dir1 dir2 file3\"" $GREY
  show "    rpmbuilder package.spec -p \"file1 file2\" -p \"dir1 dir2 file3\" -p file4" $GREY
  show "    rpmbuilder package.spec --git git://github.com/user/project.git --tag 1.3-12" $GREY
  show "    rpmbuilder package.spec --git git://github.com/user/project.git -rb develop" $GREY
  show "    rpmbuilder package.spec --git git://github.com/user/project.git -rr f8debbfdbebb97f5d0ee2218edf1425ac219cff5" $GREY
  show "    rpmbuilder package.spec -bb user:project" $GREY
  show "    rpmbuilder package.spec --github https://github.com/user/project/" $GREY
  show "    rpmbuilder package.spec --gopack github.com/user/project --version v1.2.3" $GREY
  show ""
  show "Dependencies install:" $BOLD
  show ""
  showo "--dep-install, -di" "Automatically install build dependencies before build process"
  showo "--enable-repo, -ER" "Enable repositories ${CL_DARK}(mergeable)${CL_NORM}" "repo-name"
  showo "--disable-repo, -DR" "Disable repositories ${CL_DARK}(mergeable)${CL_NORM}" "repo-name"
  showo "--exclude-package, -EX" "Exclude package by name or glob ${CL_DARK}(mergeable)${CL_NORM}" "package"
  show ""
  show "Remote build:" $BOLD
  show ""
  showo "--parallel, -P" "Parallel build on all build servers in same time"
  showo "--remote, -r" "Build rpm package on remote server"
  showo "--remote, -r" "Build rpm package on the remote server with specified host, username and password" "user:pass@host"
  showo "--remote, -r" "Build rpm package on the remote servers listed in specified file" "file"
  showo "--host, -hh" "Remote host IP or domain name" "host"
  showo "--user, -uu" "Remote host user" "username"
  showo "--pass, -pp" "Password for specified user" "password"
  showo "--key, -kk" "Path to the private key for specified user" "file"
  showo "--attach, -A" "Attach to parallel build session in tmux"
  show ""
  show "  Examples:" $BOLD
  show ""
  show "    rpmbuilder package.spec --remote -ru builder -rp mypass -rh 127.0.0.1" $GREY
  show "    rpmbuilder package.spec -r builder:mypass@127.0.0.1 -i ~/.ssh/id_dsa" $GREY
  show "    rpmbuilder package.spec --remote ~/servers.list --key ~/.ssh/id_dsa" $GREY
  show ""
  show "Build options:" $BOLD
  show ""
  showo "--no-build, -NB" "Don't execute any build stages"
  showo "--no-clean, -NC" "Don't remove source files and spec file after build"
  showo "--no-deps, -ND" "Don't verify build dependencies"
  showo "--no-binary, -NR" "Don't build binary packages"
  showo "--no-source, -NS" "Don't build source package"
  showo "--arch, -a" "Override target arch for a build" "arch"
  showo "--qa-rpaths" "Ignoring rpaths check" "\"<value>,…\""
  show ""
  show "Arguments passing:" $BOLD
  show ""
  showo "--with, -w" "Pass conditional parameters into a rpmbuild ${CL_DARK}(mergeable)${CL_NORM}" "param"
  showo "--without, -W" "Pass conditional parameters into a rpmbuild ${CL_DARK}(mergeable)${CL_NORM}" "param"
  showo "--define, -D" "Define MACRO with value (exist macro will be not redefined) ${CL_DARK}(mergeable)${CL_NORM}" "\"macro=value\""
  show ""
  show "  Examples:" $BOLD
  show ""
  show "    rpmbuilder package.spec --with ssl --with ldap" $GREY
  show "    rpmbuilder package.spec -w ssl -W ldap" $GREY
  show "    rpmbuilder package.spec --with \"ssl ldap\"" $GREY
  show "    rpmbuilder package.spec --define \"install_dir=/some/dir\" --define \"service_user=someone\"" $GREY
  show ""
  show "  More info: http://rpm5.org/docs/api/conditionalbuilds.html" $DARK
  show ""
  show "Spec validation:" $BOLD
  show ""
  showo "--no-lint, -0" "Don't check spec file before package build"
  showo "--strict, -1" "Don't build package if perfecto found major problems in spec file"
  showo "--pedantic, -2" "Don't build package if perfecto found minor problems in spec file"
  showo "--perfect, -3" "Don't build package if perfecto found any problems in spec file"
  show ""
  show "Other:" $BOLD
  show ""
  showo "--sign, -s" "Sign package after build"
  showo "--dest, -d" "Save built packages to a specified directory" "dir"
  showo "--keep-log, -kl" "Save build log after an unsuccessful build"
  showo "--bump, -b" "Bump release in spec file after a successful build"
  showo "--bump-comment, -bc" "Comment which will be added while release bump" "comment"
  showo "--tmp" "Path to a temporary directory" "dir"
  showo "--verbose, -V" "Verbose output"
  showo "--no-color, -C" "Disable colors in output"
  showo "--help, -h" "Show this help message"
  showo "--version, -v" "Show information about version"
  show ""
}

# Print version info
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - RPM package build helper"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Essential Kaos Open Source License <https://essentialkaos.com/ekol>" $DARK
  show ""
}

## PREFS PARSING ##############################################################

unset arg argn argp

PREFS_FILE="${PREFS_FILE//\~/$HOME}"

if [[ -n "$PREFS_FILE" && -r "$PREFS_FILE" ]] ; then
  while read -r arg ; do
    arg="${arg/: /:}" ; argn="${arg%:*}" ; argp="${arg#*:}"
    [[ "$SUPPORTED_ARGS " =~ $argn\  ]] && declare "$argn=$argp"
  done < <(awk 1 "$PREFS_FILE")

  unset arg argn argp
fi

## OPTIONS PARSING 4 ###################################################################

[[ $# -eq 0 ]] && main && exit $?

unset arg argn argm argv argt argk

argv="$*" ; argt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$argn" ]] ; then
    declare "$argn=$1"

    unset argn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    argm=${1:1}

    if [[ \ $SHORT_ARGS\  =~ \ $argm:!?([a-zA-Z0-9_]*) ]] ; then
      arg="${BASH_REMATCH[1]}"
    else
      declare -F showArgWarn &>/dev/null && showArgWarn "-$argm"
      shift && continue
    fi

    if [[ -z "$argn" ]] ; then
      argn=$arg
    else
      # shellcheck disable=SC2015
      [[ -z "$argk" ]] && ( declare -F showArgValWarn &>/dev/null && showArgValWarn "--$argn" ) || declare "$argn=true"
      argn=$arg
    fi

    if [[ ! $SUPPORTED_ARGS\  =~ !?$argn\  ]] ; then
      declare -F showArgWarn &>/dev/null && showArgWarn "-$argm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$argn=true" ; unset argn ; argk=true
    else
      unset argk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    arg=${1:2}

    if [[ $arg == *=* ]] ; then
      IFS="=" read -ra arg <<< "$arg"

      argm="${arg[0]}" ; argm=${argm//-/_}

      if [[ ! $SUPPORTED_ARGS\  =~ $argm\  ]] ; then
        declare -F showArgWarn &>/dev/null && showArgWarn "--${arg[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!argm}" && $MERGEABLE_ARGS\  =~ $argm\  ]] && declare "$argm=${!argm} ${arg[*]:1:99}" || declare "$argm=${arg[*]:1:99}"

      unset argm && shift && continue
    else
      arg=${arg//-/_}

      if [[ -z "$argn" ]] ; then
        argn=$arg
      else
        # shellcheck disable=SC2015
        [[ -z "$argk" ]] && ( declare -F showArgValWarn &>/dev/null && showArgValWarn "--$argn" ) || declare "$argn=true"
        argn=$arg
      fi

      if [[ ! $SUPPORTED_ARGS\  =~ !?$argn\  ]] ; then
        declare -F showArgWarn &>/dev/null && showArgWarn "--${argn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$argn=true" ; unset argn ; argk=true
      else
        unset argk
      fi

      shift && continue
    fi
  else
    if [[ -n "$argn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!argn}" && $MERGEABLE_ARGS\  =~ $argn\  ]] && declare "$argn=${!argn} $1" || declare "$argn=$1"

      unset argn && shift && continue
    fi
  fi

  argt="$argt $1" ; shift

done

[[ -n "$argn" ]] && declare "$argn=true"

unset arg argn argm argk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_ARGS" ]] && main $argv || main ${argt:1}

########################################################################################
